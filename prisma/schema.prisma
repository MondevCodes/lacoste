generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum RenewalPeriod {
  Leave15Days
  Leave30Days
  Renew15Days
  Renew30Days
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  habboName String @unique

  habboId   String @unique
  discordId String @unique

  discordLink Boolean?

  activeRenewal          RenewalPeriod?
  activeRenewalStartedAt DateTime?
  activeRenewalMessageId String?

  latestPromotionDate   DateTime?
  latestPromotionRoleId String?
  latestPromotionJobId String?

  reportsHistory         DateTime[]
  reportsHistoryCG         DateTime[]
  pendingPromotionRoleId String?

  // Tickets              Ticket[]
  SentTransactions     Transaction[] @relation(name: "URST")
  ReceivedTransactions Transaction[] @relation(name: "URRT")

  Suggestions Suggestions[]
}

model Transaction {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amount Float
  reason String?

  user   User   @relation(name: "URRT", fields: [userId], references: [id])
  userId String @db.ObjectId

  author   User?   @relation(name: "URST", fields: [authorId], references: [id])
  authorId String? @db.ObjectId
}

enum TicketStatus {
  Open
  Closed
  Denied
  Approved
  Finished
}

model Ticket {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  channelId String
  messageId String

  reason String
  status TicketStatus

  // User   User   @relation(fields: [userId], references: [id])
  // userId String @db.ObjectId

  @@unique([channelId, messageId])
}

model Medals {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  discordId String @unique

  index Int
  level Int

  required String?
  description String?

  users String[]
}

model Suggestions {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  author   User?   @relation(fields: [authorId], references: [id])
  authorId String? @db.ObjectId
  type String
  msgLink String
  title String?
}
