import { EmbedColors } from "$lib/constants/discord";
import { FormIds } from "$lib/constants/forms";
import { ENVIRONMENT } from "$lib/env";
import { ApplyOptions } from "@sapphire/decorators";
import {
  InteractionHandler,
  InteractionHandlerTypes,
} from "@sapphire/framework";
import {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonInteraction,
  ButtonStyle,
  ComponentType,
  EmbedBuilder,
  MessageFlags,
  TextChannel,
  TextInputBuilder,
  TextInputStyle,
} from "discord.js";

@ApplyOptions<InteractionHandler.Options>({
  interactionHandlerType: InteractionHandlerTypes.Button,
})
export class UpdateApprovedSuggestionsInteractionHandler extends InteractionHandler {
  public override async parse(interaction: ButtonInteraction) {
    if (
      interaction.customId !== FormIds.adicionarSugestao &&
      interaction.customId !== FormIds.removerSugestao
    ) {
      return this.none();
    }

    const userTag = interaction.user.tag;

    if (!interaction.inGuild()) {
      this.container.logger.warn(
        `[UpdateApprovedSuggestionsInteractionHandler#parse] ${userTag} tried to perform an action in a DM.`
      );

      return this.none();
    }

    const { members } =
      interaction.guild ??
      (await interaction.client.guilds.fetch(interaction.guildId));

    const { roles } =
      "toJSON" in interaction.member
        ? interaction.member
        : await members.fetch(interaction.user.id);

    const isAuthorizedJob = roles.cache.has(
      ENVIRONMENT.JOBS_ROLES.DIRETOR_GERAL.id
    );

    const isAuthorizedSector =
      this.container.utilities.discord.hasPermissionByRole({
        checkFor: "FUNDA√á√ÉO" || "PRESID√äNCIA" || "FEDERA√á√ÉO",
        category: "SECTOR",
        roles,
      });

    if (!isAuthorizedSector && !isAuthorizedJob) {
      await interaction.reply({
        content: `‚õî **N√£o autorizado**\nVoc√™ precisa ser dos setores de: <@&${ENVIRONMENT.SECTORS_ROLES.FUNDA√á√ÉO.id}>, <@&${ENVIRONMENT.SECTORS_ROLES.PRESID√äNCIA.id}>, <@&${ENVIRONMENT.SECTORS_ROLES.FEDERA√á√ÉO.id}> ou ter o cargo de <@&${ENVIRONMENT.JOBS_ROLES.DIRETOR_GERAL.id}> para acessar as fun√ß√µes "*Adicionar/Remover Sugest√µes Aprovadas*".`,
        flags: MessageFlags.Ephemeral,
      });
    }

    return isAuthorizedSector || isAuthorizedJob ? this.some() : this.none();
  }

  public override async run(interaction: ButtonInteraction) {
    const { interaction: interactionFromModal, result: modalResult } =
      await this.container.utilities.inquirer.awaitModal<
        "target" | "type" | "link" | "notes"
      >(interaction, {
        title:
          interaction.customId === FormIds.adicionarSugestao
            ? `Adicionar Sugest√£o Aprovada [Configura√ß√£o]`
            : `Remover Sugest√£o Aprovada [Configura√ß√£o]`,
        listenInteraction: true,

        inputs: [
          new TextInputBuilder()
            .setCustomId("target")
            .setLabel("Membro")
            .setPlaceholder("Informe o Habbo (Nick)")
            .setStyle(TextInputStyle.Short)
            .setRequired(true),

          new TextInputBuilder()
            .setCustomId("type")
            .setLabel(`Informe o tipo da Sugest√£o`)
            .setPlaceholder(
              `SM (Sugest√µes com Medalhas) ou SD (Sugest√µes Diversas)`
            )
            .setStyle(TextInputStyle.Short)
            .setRequired(true),

          new TextInputBuilder()
            .setCustomId("link")
            .setLabel(`Insira o Link da Mensagem do Feedback`)
            .setPlaceholder(
              `https://discord.com/channels/788612423346683935/1016447495758426213/1368757073143140452`
            )
            .setStyle(TextInputStyle.Short)
            .setRequired(true),

          new TextInputBuilder()
            .setCustomId("notes")
            .setLabel(`Observa√ß√£o`)
            .setPlaceholder(`Adicione suas observa√ß√µes a essa sugest√£o`)
            .setStyle(TextInputStyle.Short)
            .setRequired(false),
        ],
      });

    const suggestionType = modalResult.type.toLocaleUpperCase();
    const invalidType = suggestionType != "SD" && suggestionType != "SM";
    let channel: TextChannel;
    try {
      channel = (await this.container.client.channels.fetch(
        ENVIRONMENT.NOTIFICATION_CHANNELS.FEEDBACKS
      )) as TextChannel;
    } catch {
      channel = null;
    }
    const regexMsgId =
      /^https:\/\/discord\.com\/channels\/\d+\/1016447495758426213\/(\d+)$/;
    const matchMsgId = modalResult.link.match(regexMsgId);
    const msgId = matchMsgId ? matchMsgId[1] : null;
    const msgLink = msgId ? await channel.messages.fetch(msgId) : false;

    const rawName = modalResult.target
      .trim()
      .replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    const resultRaw: any = await this.container.prisma.$runCommandRaw({
      find: "User",
      filter: {
        habboName: {
          $regex: `^${rawName}$`,
          $options: "i",
        },
      },
      projection: {
        _id: 1,
        discordId: 1,
        habboName: 1,
        suggestions: 1,
      },
      limit: 1,
    });

    if (!resultRaw.cursor?.firstBatch.length || invalidType || !msgLink) {
      return await interactionFromModal.editReply({
        content: `‚ö†Ô∏è  Informa√ß√µes Inv√°lidas:
        ${
          !resultRaw.cursor?.firstBatch.length
            ? `\n‚ùå O usu√°rio **${rawName}** n√£o foi encontrado. Verifique se o nome est√° correto e tente novamente.`
            : ""
        } ${
          invalidType
            ? `\n‚ùå **Tipo de sugest√£o** est√° incorreta. Verifique se est√° inserindo corretamente **SM** ou **SD** no campo adequado.`
            : ""
        } ${
          !msgLink
            ? `\n‚ùå **Link do Feedback da Sugest√£o** est√° incorreto. Verifique se est√° inserindo corretamente, o link deve ser do canal <#${ENVIRONMENT.NOTIFICATION_CHANNELS.LOGS}>.`
            : ""
        } ${
          !channel ? `\n‚ùå N√£o foi poss√≠vel acessar o canal de feedbacks.` : ""
        }`,
      });
    }

    const targetDB = resultRaw.cursor?.firstBatch[0];

    const confirmButton = new ButtonBuilder()
      .setCustomId("confirm")
      .setLabel("Confirmar")
      .setStyle(ButtonStyle.Success)
      .setEmoji("‚úÖ");

    const cancelButton = new ButtonBuilder()
      .setCustomId("cancel")
      .setLabel("Cancelar")
      .setStyle(ButtonStyle.Secondary)
      .setEmoji("‚ùå");

    const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
      confirmButton,
      cancelButton
    );

    const confirmMessage = await interactionFromModal.editReply({
      content:
        `‚ö†Ô∏è **ATEN√á√ÉO!** Confirme se as informa√ß√µes est√£o corretas:\n` +
        `\n- **Usu√°rio alterado:** ${targetDB.habboName}` +
        `\n- **A√ß√£o:** ${
          interaction.customId === FormIds.adicionarSugestao
            ? "Adicionar"
            : "Remover"
        } Sugest√£o Aprovada` +
        `\n- **Tipo da Sugest√£o:** ${suggestionType}` +
        `\n- **Sugest√£o:** ${modalResult.link}` +
        `\n\nCaso esteja de acordo, clique em **Confirmar** para prosseguir ou **Cancelar** para abortar.`,
      components: [row],
    });

    try {
      const interaction = await confirmMessage.awaitMessageComponent({
        componentType: ComponentType.Button,
        filter: (i) => i.user.id === interactionFromModal.member.user.id,
        time: 30000,
      });

      if (interaction.customId === "confirm") {
        await interaction.update({
          content: "üîÑ Processando...",
          components: [],
        });
      } else {
        return await interaction.update({
          content: "‚ùå Opera√ß√£o cancelada.",
          components: [],
        });
      }
    } catch (error) {
      return await confirmMessage.edit({
        content: "‚è∞ Tempo esgotado. Opera√ß√£o cancelada.",
        components: [],
      });
    }

    const countSuggestions = await this.container.prisma.suggestions.groupBy({
      by: ["type"],
      _count: { _all: true },
      where: {
        authorId: targetDB._id.$oid,
        type: { in: ["SM", "SD"] },
      },
    });
    const suggestions = {
      SM: countSuggestions.find((c) => c.type === "SM")?._count._all ?? 0,
      SD: countSuggestions.find((c) => c.type === "SD")?._count._all ?? 0,
    };

    if (interaction.customId === FormIds.adicionarSugestao) {
      const existsSuggestion =
        await this.container.prisma.suggestions.findFirst({
          where: {
            msgLink: modalResult.link,
            type: { in: ["SD", "SM"] },
            authorId: targetDB._id.$oid,
          },
        });

      if (existsSuggestion)
        return await interactionFromModal.editReply({
          content: `‚ö†Ô∏è  A sugest√£o que est√° tentando **criar j√° existe** para ***${targetDB.habboName}***.`,
        });

      await this.container.prisma.suggestions
        .create({
          data: {
            msgLink: modalResult.link,
            type: suggestionType,
            authorId: targetDB._id.$oid,
          },
        })
        .catch(async (error) => {
          this.container.logger.error({
            message: `[UpdateApprovedSuggestionsInteractionHandler#run] Ocorreu um erro ao "${interactionFromModal.member.user.username}" tentar criar a sugest√£o de tipo "${suggestionType}" com o link "${modalResult.link}" no membro "${targetDB.habboName}".`,
            error: error.message,
          });

          await interactionFromModal.editReply({
            content: `‚ö†Ô∏è  Ocorreu um erro ao tentar **criar** uma sugest√£o. Por favor, contate os administradores do servidor.`,
          });

          throw new Error(
            `Ocorreu um erro durante a cria√ß√£o da sugest√£o: ${error.message}.`
          );
        });

      this.container.logger.info(
        `[UpdateApprovedSuggestionsInteractionHandler#run] Sugest√£o criada com sucesso no banco de dados por "${interactionFromModal.member.user.username}" do tipo "${suggestionType}" com o link "${modalResult.link}" no membro "${targetDB.habboName}".`
      );

      const targetMember = await interaction.guild.members.fetch(
        targetDB.discordId
      );

      if (!targetMember) {
        return await interactionFromModal.editReply({
          content: `‚ö†Ô∏è  Ocorreu um erro ao tentar notificar ${targetDB.habboName} de sua sugest√£o aprovada, verifique se est√° ingresso no servidor.`,
        });
      }

      const dmChannel =
        targetMember.dmChannel || (await targetMember.createDM());

      await dmChannel
        .send({
          embeds: [
            new EmbedBuilder()
              .setColor(EmbedColors.Success)
              .setTitle("Sugest√£o Aprovada! üì©‚úÖ")
              .setDescription(
                `üéâ **Parab√©ns! Uma sugest√£o ${suggestionType} foi aprovada e adicionada ao seu perfil de carreira.**
              
              Acesse a aba ‚Äú***Verifica√ß√µes***‚Äù para consult√°-la.
              √â a **sua** sugest√£o que transforma a ***Lacoste***, estamos ansiosos para a sua pr√≥xima!
              
              ***#OrgulhoDeSerLacoste***`
              )
              .setFooter({
                text: interaction.user.displayName,
                iconURL: interaction.user.displayAvatarURL(),
              }),
          ],
        })
        .catch((error) => {
          this.container.logger.error({
            message: `[UpdateApprovedSuggestionsInteractionHandler#run] Tentativa de enviar feedback da sugest√£o do tipo "${suggestionType}" do membro "${interactionFromModal.user.displayName}" com o link "${modalResult.link}" no membro "${targetDB.habboName}" falhou.`,
            error: error.message,
          });
          return true;
        });
    } else {
      if (!suggestions[suggestionType]) {
        return await interactionFromModal.editReply({
          content: `üö´ Membro ***${targetDB.habboName}*** n√£o possui sugest√µes aprovadas registradas no banco de dados.`,
        });
      }

      const existsSuggestion = await this.container.prisma.suggestions
        .findFirst({
          where: {
            msgLink: modalResult.link,
            type: suggestionType,
            authorId: targetDB._id.$oid,
          },
        })
        .catch(async (error) => {
          await interactionFromModal.editReply({
            content: `‚ùå N√£o foi encontrado nenhuma sugest√£o igual a que est√° tentando deletar ou ocorreu um erro inesperado.`,
          });

          throw new Error(
            `Ocorreu um erro durante a verifica√ß√£o da exist√™ncia da sugest√£o: ${error.message}.`
          );
        });

      await this.container.prisma.suggestions
        .delete({
          where: {
            id: existsSuggestion.id,
          },
        })
        .catch(async (error) => {
          this.container.logger.error({
            message: `[UpdateApprovedSuggestionsInteractionHandler#run] Tentativa de deletar sugest√£o do tipo "${suggestionType}" do membro "${interactionFromModal.user.displayName}" com o link "${modalResult.link}" no membro "${targetDB.habboName}" falhou.`,
            error: error.message,
          });

          await interactionFromModal.editReply({
            content: `‚ö†Ô∏è  Ocorreu um erro ao tentar **deletar** uma sugest√£o. Por favor, contate os administradores do servidor.`,
          });

          throw new Error(
            `Ocorreu um erro durante o delete da sugest√£o: ${error.message}.`
          );
        });

      this.container.logger.info(
        `[UpdateApprovedSuggestionsInteractionHandler#run] Sugest√£o deletada com sucesso do banco de dados por "${interactionFromModal.member.user.username}" do tipo "${suggestionType}" com o link "${modalResult.link}" no membro "${targetDB.habboName}".`
      );
    }

    const notificationChannel = (await this.container.client.channels.fetch(
      ENVIRONMENT.NOTIFICATION_CHANNELS.LOGS
    )) as TextChannel;

    await notificationChannel
      .send({
        embeds: [
          new EmbedBuilder()
            .setColor(EmbedColors.Info)
            .setTitle(
              interaction.customId === FormIds.adicionarSugestao
                ? "Sugest√£o Aprovada ‚úÖ"
                : "Sugest√£o Removida üóëÔ∏è"
            )
            .setAuthor({
              name: `Aprovado por ${interactionFromModal.user.displayName}`,
              iconURL: interactionFromModal.user.displayAvatarURL(),
            })
            .addFields([
              {
                name: "üìá Autor da Sugest√£o",
                value: `${targetDB.habboName ?? `@${targetDB.discordId}`}`,
                inline: true,
              },
              {
                name: `üõ°Ô∏è Tipo da Sugest√£o`,
                value: `${
                  suggestionType === "SM"
                    ? "Sugest√£o com Medalha üèÖ"
                    : "Sugest√£o Diversa üé®"
                }`,
                inline: true,
              },
              {
                name: "üì© Sugest√£o",
                value: `${modalResult.link}`,
                inline: true,
              },
              {
                name: `üó≥Ô∏è üîÑ Sugest√µes ${suggestionType} (Anterior)`,
                value: `${
                  interaction.customId === FormIds.adicionarSugestao
                    ? suggestionType === "SM"
                      ? suggestions.SM > 0
                        ? suggestions.SM - 1
                        : 0
                      : suggestions.SM > 0
                      ? suggestions.SD - 1
                      : 0
                    : suggestionType === "SM"
                    ? suggestions.SM > 0
                      ? suggestions.SM + 1
                      : 0
                    : suggestions.SM > 0
                    ? suggestions.SD + 1
                    : 0
                }`,
                inline: true,
              },
              {
                name: `üó≥Ô∏è ‚úÖ Sugest√µes ${suggestionType} (Atualizado)`,
                value: `${
                  suggestionType === "SM" ? suggestions.SM : suggestions.SD
                }`,
                inline: true,
              },
              {
                name: "üóíÔ∏è Observa√ß√µes",
                value: modalResult.notes ? modalResult.notes : `*Nenhuma*`,
                inline: false,
              },
            ]),
        ],
      })
      .catch((error) => {
        this.container.logger.error({
          message: `[UpdateApprovedSuggestionsInteractionHandler#run] Tentativa de enviar o log da sugest√£o do tipo "${suggestionType}" do membro "${interactionFromModal.user.displayName}" com o link "${modalResult.link}" no membro "${targetDB.habboName}" falhou.`,
          error: error.message,
        });
      });

    return await interactionFromModal.editReply({
      content: `üì© ‚úÖ Sugest√£o Aprovada ${
        interaction.customId === FormIds.adicionarSugestao
          ? "**adicionada** ao"
          : "**removida** do"
      } perfil de ***${targetDB.habboName}*** com sucesso.`,
    });
  }
}
